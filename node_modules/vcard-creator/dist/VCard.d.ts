import { Property } from './types/VCard';
export default class VCard {
    /**
     * Default Charset
     *
     * @var string
     */
    charset: string;
    /**
     * Default ContentType
     *
     * @var string
     */
    private contentType;
    /**
     * Default filename
     *
     * @var string
     */
    private filename;
    /**
     * Default fileExtension
     *
     * @var string
     */
    private fileExtension;
    /**
     * Properties
     *
     * @var array
     */
    private properties;
    /**
     * definedElements
     *
     * @var object
     */
    private definedElements;
    /**
     * Multiple properties for element allowed
     *
     * @var array
     */
    private multiplePropertiesForElementAllowed;
    /**
     * Defines the output format
     *
     * @var bool
     */
    private useVCalendar;
    constructor(format?: 'vcard' | 'vcalendar');
    /**
     * Set format
     *
     * @param  string format Either 'vcard' or 'vcalendar'
     */
    setFormat(format?: 'vcard' | 'vcalendar'): void;
    /**
     * Add address
     *
     * @param  string [optional] name
     * @param  string [optional] extended
     * @param  string [optional] street
     * @param  string [optional] city
     * @param  string [optional] region
     * @param  string [optional] zip
     * @param  string [optional] country
     * @param  string [optional] type
     * type may be DOM | INTL | POSTAL | PARCEL | HOME | WORK
     * or any combination of these: e.g. 'WORK;PARCEL;POSTAL'
     * @return this
     */
    addAddress(name?: string, extended?: string, street?: string, city?: string, region?: string, zip?: string, country?: string, type?: string): this;
    /**
     * Add birthday
     *
     * @param  string date Format is YYYY-MM-DD
     * @return this
     */
    addBirthday(date: string): this;
    /**
     * Add company
     *
     * @param string company
     * @param string department
     * @return this
     */
    addCompany(company: string, department?: string): this;
    /**
     * Add email
     *
     * @param  string address The e-mail address
     * @param  string [optional] type
     * The type of the email address
     * type may be  PREF | WORK | HOME
     * or any combination of these: e.g. 'PREF;WORK'
     * @return this
     */
    addEmail(address: string, type?: string): this;
    /**
     * Add jobtitle
     *
     * @param  string jobtitle The jobtitle for the person.
     * @return this
     */
    addJobtitle(jobtitle: string): this;
    /**
     * Add role
     *
     * @param  string role The role for the person.
     * @return this
     */
    addRole(role: string): this;
    /**
     * Add a photo or logo (depending on property name)
     *
     * @param string property LOGO|PHOTO
     * @param string url image url or filename
     * @param bool   include Do we include the image in our vcard or not?
     * @param string element The name of the element to set
     * @throws VCardException
     * @return this
     */
    private addMedia;
    /**
     * Add a photo or logo (depending on property name)
     *
     * @param string property LOGO|PHOTO
     * @param string content image content
     * @param string element The name of the element to set
     * @throws VCardException
     * @return this
     */
    private addMediaContent;
    /**
     * Add name
     *
     * @param  string [optional] lastName
     * @param  string [optional] firstName
     * @param  string [optional] additional
     * @param  string [optional] prefix
     * @param  string [optional] suffix
     * @return this
     */
    addName(lastName?: string, firstName?: string, additional?: string, prefix?: string, suffix?: string): this;
    /**
     * Add note
     *
     * @param  string note
     * @return this
     */
    addNote(note: string): this;
    /**
     * Add categories
     *
     * @param array categories
     * @return this
     */
    addCategories(categories: string[]): this;
    /**
     * Add phone number
     *
     * @param  string number
     * @param  string [optional] type
     * Type may be PREF | WORK | HOME | VOICE | FAX | MSG |
     * CELL | PAGER | BBS | CAR | MODEM | ISDN | VIDEO
     * or any senseful combination, e.g. 'PREF;WORK;VOICE'
     * @return this
     */
    addPhoneNumber(number: number, type?: string): this;
    /**
     * Add Logo
     *
     * @param  string url image url or filename
     * @param  bool include Include the image in the vcard?
     * @return this
     */
    addLogo(url: string, include?: boolean): this;
    /**
    * Add Photo
    *
    * @param  string url image url or filename
    * @param  bool include Include the image in the vcard?
    * @return this
    */
    addPhoto(url: string, include?: boolean): this;
    /**
     * Add URL
     *
     * @param  string url
     * @param  string [optional] type Type may be WORK | HOME
     * @return this
     */
    addURL(url: string, type?: string): this;
    /**
     * Build vCard (.vcf)
     *
     * @return string
     */
    private buildVCard;
    /**
     * Build VCalender (.ics) - Safari (< iOS 8) can not open .vcf files, so we
     * have build a workaround.
     *
     * @return string
     */
    private buildVCalendar;
    /**
     * Get output as string
     * @deprecated in the future
     *
     * @return string
     */
    toString(): string;
    /**
     * Get charset
     *
     * @return string
     */
    getCharset(): string;
    /**
     * Get charset string
     *
     * @return string
     */
    getCharsetString(): string;
    /**
     * Get content type
     *
     * @return string
     */
    getContentType(): string;
    /**
     * Get filename
     *
     * @return string
     */
    getFilename(): string;
    /**
     * Get file extension
     *
     * @return string
     */
    getFileExtension(): string;
    /**
     * Get output as string
     * iOS devices (and safari < iOS 8 in particular)can not read .vcf (= vcard)
     * files. So there is a workaround to build a .ics (= vcalender) file.
     *
     * @return string
     */
    getOutput(): string;
    /**
     * Get properties
     *
     * @return array
     */
    getProperties(): Property[];
    /**
     * Has property
     *
     * @param  string key
     * @return bool
     */
    hasProperty(key: string): boolean;
    /**
     * Set charset
     *
     * @param  string charset
     * @return void
     */
    setCharset(charset: string): void;
    /**
     * Set filename
     *
     * @param  string $value
     * @return void
     */
    setFilename(value: string): void;
    /**
     * Set property
     *
     * @param  string element The element name you want to set,
     *                e.g.: name, email, phoneNumber, ...
     * @param  string key
     * @param  string value
     * @throws VCardException
     */
    setProperty(element: string, key: string, value: string): void;
}
